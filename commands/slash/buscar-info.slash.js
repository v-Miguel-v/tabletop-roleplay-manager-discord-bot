const fs = require("node:fs");
const { SlashCommandBuilder } = require("discord.js");
const databaseRoute = "./local_database";
const globalCharRoute = `${databaseRoute}/character_sheet_types`;

const trpgAvailable = [];
fs.readdirSync(globalCharRoute).forEach(trpg => {
	if (fs.readdirSync(`${globalCharRoute}/${trpg}`).includes("data-and-rules.js")) {
		const trpgFormatted = trpg.replace(/_/g, " ");
		trpgAvailable.push({ name: trpgFormatted, value: trpgFormatted });
	}
});

const searchIndexes = {};
trpgAvailable.forEach(trpg => {
	const trpgDesformatted = trpg.name.replace(/ /g, "_");
	const dataAndRulesUsedByTheTRPG = require(`../../${globalCharRoute}/${trpgDesformatted}/data-and-rules.js`);
	searchIndexes[`${trpgDesformatted}_index`] = [];
	dataAndRulesUsedByTheTRPG.forEach(dataset => {
		const datasetRoute = `${databaseRoute}/data_and_rules/${dataset}_data`;
		const data = fs.readFileSync(`${datasetRoute}/0-search-index-spanish.txt`, "utf-8").toString().split("\r\n").filter(x => x !== "");
		const mergedData = searchIndexes[`${trpgDesformatted}_index`].concat(data);
		searchIndexes[`${trpgDesformatted}_index`] = mergedData;
	});
});

module.exports = {
	data: new SlashCommandBuilder()
		.setName("buscar-info")
		.setDescription("Busca y muestra informaciÃ³n (clases, razas, reglas...) del juego de rol especificado.")
		.addStringOption(option => option
			.setName("juego-de-rol")
			.setDescription("El juego de rol en el cual se buscarÃ¡ la informaciÃ³n.")
			.setRequired(true)
			.addChoices(...trpgAvailable)
		)
		.addStringOption(option => option
			.setName("barra-de-bÃºsqueda")
			.setDescription("AquÃ­ se ingresa el tÃ©rmino especÃ­fico (clases, razas, reglas...) que se buscarÃ¡.")
			.setRequired(true)
			.setAutocomplete(true)
		),

	async autocomplete(interaction, client) {
		const trpgSelected = interaction.options.getString("juego-de-rol").replace(/ /g, "_");
		const input = interaction.options.getFocused().toLowerCase();
		let choices = searchIndexes[`${trpgSelected}_index`];
		const filtered = choices.filter(choice => {
			const regex = /[\s()\[\]]/g; // All Spaces, () and [].
			const inputs = input.split(regex).filter(x => x !== "");
			const words = choice.toLowerCase().split(regex).filter(x => x !== "");
			// return words.some(word => word.startsWith(input)); //// VersiÃ³n Antigua
			if (inputs.length > words.length) return false; 		//* Si la cantidad de palabras ingresadas en el input es mayor a cualquier cantidad de palabras de los resultados, directamente no encontrarÃ¡ ningÃºn resultado, asÃ­ que retorna "false".
			const copiedWords = [...words]; 						//* Copiamos el array words ya que, para poder realizar adecuadamente el funcionamiento de la barra de bÃºsqueda necesitaremos modificar y eliminar elmentos del array, asÃ­ que para no alterar el original creamos una copia.
			inputs.forEach(input => { 								//* Para cada una de las palabras del input...
				let indexToDelete = null; 								//* 1. Inicializamos una variable "indexToDelete" en null.
				if (copiedWords.some((word, index) => { 				//* 2. (Condicional) Preguntamos: Â¿En la lista de palabras (copiadas) de los resultados "words", hay alguna que empiece con la palabra actual del input?
					indexToDelete = index; 									//* 2.1 Guardamos el Ã­ndice de la palabra "word" del resultado que hizo match con el input.
					return word.startsWith(input); 							//* 2.2 Verificamos la condiciÃ³n.
				})) {
					copiedWords.splice(indexToDelete, 1); 				//* 3. Si la condiciÃ³n se cumple, antes de pasar a la siguiente palabra del input, borramos de la copia de la lista de palabras del resultado (copiedWords) la palabra con el Ã­ndice que hizo match. AsÃ­, para la siguiente iteraciÃ³n, esa palabra no estarÃ¡.
				}
			});
			const allInputsMatched = (words.length - inputs.length) === (copiedWords.length); // Tras finalizar el forEach, y por tanto la evaluaciÃ³n del fragmento de cÃ³digo anterior para todas y cada una de las palabras del input... verificamos si todas las palabras hicieron Match mediante una resta. Si todas las palabras hicieron match, entonces a copiedWords se le borraron una cantidad de elementos iguales a la cantidad de elementos del input (porque precisamente los elementos del input eran los que se estaban iterando). En otras palabras: Si restamos de la cantidad de palabras del resultado (words) la cantidad de palabras del input (input), el resultado deberÃ­a ser igual a la cantidad actual de elementos de la copia luego de la iteraciÃ³n si todas las palabras hicieron match.
			return allInputsMatched ? true : false; // En caso de que sÃ­, se retorna true, en caso de que no, se retorna false. Esta parte es algo redundante, pero es mÃ¡s que todo para darle mÃ¡s legibilidad y casi se pueda leer la frase "If all inputs matched... Then return true, if not, return false".
		}).splice(0, 24);
		await interaction.respond( filtered.map(choice => ({ name: choice, value: choice })) );
	},

	async execute(interaction, client) {
		interaction.reply("Chambeando ðŸ˜Œâœ¨");
	}
}